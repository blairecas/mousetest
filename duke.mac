	.title	DUKE
	.mcall	.print .ttout .exit .herr .setto .csige .cstat .readw .close
	.enabl	LC
	.list	MEB

	.asect
	.=1000

Start:	call	GetAllMem

	; run PPU code
	mov	#PPUSta, R4			; run PPU code
	mov	#<PPUEnd-PPUSta>/2, R5
	call	PPURun

	; wait for PPU
	tst	PpuComm
	bne	.-4

	; check for GM device presence
	; tst	PpuNoGm
	; beq	10$
	; .print	#MsgNoGm
	; br	90$

	; unpack and draw picture
	; red
	mov	#DukePicR, R0
	mov	#END_OF_PROGRAM, R1
	call	Unpack
	mov	#2, PpuComm
	tst	PpuComm
	bne	.-4
	; green
	mov	#DukePicG, R0
	mov	#END_OF_PROGRAM, R1
	call	Unpack	
	mov	#3, PpuComm
	tst	PpuComm
	bne	.-4
	; blue
	mov	#DukePicB, R0
	mov	#END_OF_PROGRAM, R1
	call	Unpack	
	mov	#4, PpuComm
	tst	PpuComm
	bne	.-4

	; unpack and play midi
	mov	#DukeMidi, R0
	mov	#END_OF_PROGRAM, R1
	call	Unpack
	mov	#END_OF_PROGRAM, MFileStart
	mov	#END_OF_PROGRAM+^x489F, MFileEnd	; (!) hard coded midi file end+1
	call	MParseHeader
	call	MInitTracks
	call	PlayMidi

90$:	; ask PPU for exit
	mov	#-1, PpuComm
	tst	PpuComm
	bne	.-4

	; release PPU memory
	call	PPRele

	.print	#MsgCls
	.exit


ErrCode:	.word	0
MsgCls: 	.byte	033, 014, 110, 0
MsgNoGm:	.asciz	"? no GM device detected on PPU 177366/177370"
		.even


; //////////////////////////////////////////////////////////////////////////////
; // Memory and utils
; //////////////////////////////////////////////////////////////////////////////

RamTop:		.word	0			; top addr of available RAM

MsgSettop:	.asciz	"? can't use all memory (.settop failed)"
MsgNoMemory:	.asciz	"? can't allocate memory up to 100000"
		.even 

; code from Alex_K
GetAllMem:
	mov	@#54, R0			; addr of RMON
	mov	266(R0), R0			; addr of USR? (in case of set USR SWAP)
	tst	-(R0)				; -2 bytes
	.setto
	bcc	10$
	.print	#MsgSettop
	.exit
10$:	mov	R0, RamTop
	cmp	R0, #100000			; at least top must be 100000 (i want so :)
	bhis	20$
	.print	#MsgNoMemory
	.exit
20$:	; and clear memory to top from end of program
	mov	#END_OF_PROGRAM, R0
	mov	RamTop, R3
	sub	R0, R3
	clrb	(R0)+
	sob	R3, .-2
	return 


; compare byte arrays, R4, R5 - addrs, R3 - length, return C=1 - have differences
CompareBytes:
	cmpb	(R4)+, (R5)+
	bne	90$
	sob	R3, CompareBytes
	tst	(PC)+
90$:	sec
	return


; get word in MSB, R5 - addr
; return: R0 - word, R5 - addr after
GetMsbWord:
	clr	R0
	bisb	(R5)+, R0
	swab	R0
	bisb	(R5)+, R0
	return


; get 3-byte MSB into R0:R1
GetMsb3byte:
	clr	R0
	clr	R1
	bisb	(R5)+, R0
	bisb	(R5)+, R1
	swab	R1
	bisb	(R5)+, R1
	return


; get dword -> word in MSB
GetMsbDword:
	inc	R5				; skip 2 bytes
	inc	R5
	br	GetMsbWord
	

; get variable-sized length
; R5 - addr of starting byte
; return: R3 - length - WARNING: originally DWORD (!)
GetVarLength:
	clr	R3
10$:	movb	(R5)+, R0
	bpl	90$
	bic	#^B1111111110000000, R0
	ash	#7, R3
	bisb	R0, R3
	br	10$
90$:	ash	#7, R3
	bisb	R0, R3
	return


; ZX0 v2.2 standart unpacker
; original ZX0 encoder/decoder (c) Einar Saukas & Urusergi
; PDP11 version by reddie, 02-may-2024 (upd)
; usage:
; R0 = source data addr (compressed)
; R1 = addr for decompressing data
; out:
; R0 = next byte after the source data
; R1 = next byte after the decompressed data
Unpack:
	clr	R2
	movb	#200, R3
	sxt	R5
DZX0_LITERALS:
	call	DZX0_ELIAS
	movb	(R0)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcs	DZX0_NEW_OFFSET
	call	DZX0_ELIAS
DZX0_COPY:
	mov	R1, R4
	add	R5, R4
	movb	(R4)+, (R1)+
	sob	R2, .-2
	aslb	R3
	bcc	DZX0_LITERALS
DZX0_NEW_OFFSET:
	mov	#-2, R2
	call	DZX0_ELIAS_LOOP
	incb	R2
	bne	.+4
DZX0_EXIT:
	return
	swab	R2
	mov	R2, R5
	clrb	R5
	bisb	(R0)+, R5
	asr	R5
	mov	#1, R2
	bcs	.+6
	call	DZX0_ELIAS_BACKTRACK
	inc	R2
	br	DZX0_COPY
DZX0_ELIAS:
	incb	R2
DZX0_ELIAS_LOOP:
	aslb	R3
	bne	DZX0_ELIAS_SKIP
	movb	(R0)+, R3
	rolb	R3
DZX0_ELIAS_SKIP:
	bcs	DZX0_EXIT
DZX0_ELIAS_BACKTRACK:
	aslb	R3
	rol	R2
	br	DZX0_ELIAS_LOOP


; //////////////////////////////////////////////////////////////////////////////
; // MIDI
; //////////////////////////////////////////////////////////////////////////////

; Tempos:
; Initial divisor for q-note (beat): 500 000 / div = mks for tick for 120bpm (500 000 - mks per beat)
; FF 54 03 XX XX XX - tempo change for q-note (beat) 
; get BPM = 60 000 000 / xxxxxx

C_MAX_TRACKS	= 16.

MFileStart:	.word	0
MFileEnd:	.word	0
MFileType:	.word	0
MTracksNum:	.word	0
MCurTracksNum:	.word	0
MSpeedDiv:	.word	0
MMksTickDef:	.word	0

MTrChMsgAddr:	.word	0
MTrChMsg:	.blkw	C_MAX_TRACKS
MTracks:	.blkw	C_MAX_TRACKS * 3	; [delay] [cur addr] [end+1 addr]

MThdTag:	.ascii	"MThd"<0><0><0><6>
MTrkTag:	.ascii	"MTrk"

MsgBadHeader:	.asciz	"? midi file header is bad (no MThd 6)"
MsgBadType:	.asciz	"? only type 0,1 midi allowed"
MsgBadTrnum:	.asciz	"? midi tracks number must be (1..16)"
MsgBadDivisor:	.asciz	"? SMPTE speed not supported (speed division is negative)"
MsgBadTrkh:	.asciz	"? bad track header (no MTrk)"
MsgBadTrks:	.asciz	"? too many actual MTrk (>16)"
		.even

; get some info from midi file header
MParseHeader:
	; test for MThd 6
	mov	MFileStart, R5
	mov	#MThdTag, R4
	mov	#8., R3
	call	CompareBytes
	bcc	10$
	.print	#MsgBadHeader
	br	90$
10$:	; midi file type
	call	GetMsbWord
	mov	R0, MFileType
	beq	20$
	dec	R0
	beq	20$
	.print	#MsgBadType
	br	90$
20$:	; tracks number
	call	GetMsbWord
	mov	R0, MTracksNum
	cmp	R0, #1
	blo	24$
	cmp	R0, #16.
	bhi	24$
	br	30$
24$:	.print	#MsgBadTrnum
	br	90$
30$:	; speed divisor
	call	GetMsbWord
	tst	R0
	bpl	32$
	.print	#MsgBadDivisor
	br	90$
32$:	mov	R0, MSpeedDiv
	beq	40$				; wtf?
	; 500000. / divisor - tick time in mks for 120bpm
	; make it a bit slower, say 520000...
	mov	#^B0111, R0
	mov	#^B1110111101000000, R1
	call	MUpdateTVal
40$:	; seems all is ok
	tst	(PC)+
90$:	sec
	return


; helper procedure to update PP timer value
; R0:R1 - mks per beat
MUpdateTVal:
	div	MSpeedDiv, R0			; R0:R1 / divisor
	clc					; our PPU timer is 16mks clock
	ror	R0				; so - divide by 16.
	asr	R0
	asr	R0
	asr	R0
	mov	R0, PpuTimerVal
	return


; prepare midi tracks
MInitTracks:
	mov	MFIleStart, R5
	add	#14., R5			; R5 = first MTrk addr
	mov	#MTracks, R2			; R2 = tracks array addr
	mov	#-1, R1				; R1 = cur track #
10$:	inc	R1
	cmp	R1, #C_MAX_TRACKS
	blo	14$
	.print	#MsgBadTrks
	br	90$
14$:	mov	#MTrkTag, R4
	mov	#4., R3
	call	CompareBytes
	bcc	20$
	.print	#MsgBadTrkh
	br	90$
20$:	clr	(R2)+				; initial delay = 0
	call	GetMsbDword
	mov	R5, (R2)+			; store track data start addr
	add	R0, R5
	mov	R5, (R2)+			; store track data end+1 addr
	cmp	R5, MFileEnd
	blo	10$
	; seems all is ok
	tst	(PC)+
90$:	sec
	return


; process track 
; R4 - addr in MTracks
MProcessTrack:
	mov	2(R4), R5
	beq	99$
	dec	(R4)
	bmi	10$
	bne	99$
	br	20$
10$:	call	GetVarLength
	mov	R5, 2(R4)
	mov	R3, (R4)
	bne	99$
20$:	call	MSendMessage
	mov	R5, 2(R4)
	cmp	R5, 4(R4)
	blo	10$	
	clr	2(R4)
	dec	MCurTracksNum
99$:	return


; send midi event message
; R5 - addr (bytes after delay)
; return: R5 - next delay addr
MSendMessage:
	clr	R0
	bisb	(R5)+, R0
	; 0xFF - meta event message - just skip it (if not change tempo)
	cmp	R0, #^xFF
	bne	10$
	movb	(R5)+, R0
	cmpb	R0, #^x51			; is it 'set tempo'?
	bne	2$
	; change tempo
	inc	R5				; (R5) must be 0x03
	call	GetMsb3byte
	call	MUpdateTVal			; update timer val
	return
2$:	call	GetVarLength			; R3 <- variable length
	add	R3, R5				; skip rest
	return
10$:	; 0xF0 - sysex message start
	cmp	R0, #^xF0
	bne	30$
	call	MSendByte			; send R0 = 0xF0
20$:	call	GetVarLength
	jmp	MSendArray			; send rest of message
30$:	; 0xF7 - sysex message continue/end
	cmp	R0, #^xF7
	beq	20$
	;
	; channel midi messages 
	;
	; test for continue
	cmp	R0, #^x80
	bhis	40$
	mov	@MTrChMsgAddr, R0
	dec	R5
	br	50$
40$:	; have new channel message
	mov	R0, @MTrChMsgAddr
	call	MSendByte
50$:	bic	#^B1111111100001111, R0		; get byte without channel
	; 0xCn - program change - 1-byte
	cmp	R0, #^xC0
	bne	70$
60$:	clr	R0
	bisb	(R5)+, R0
	jmp	MSendByte
70$:	; 0xDn - channel pressure - 1-byte
	cmp	R1, #^xD0
	beq	60$
	; assume all others are 2-byte
	clr	R0
	bisb	(R5)+, R0
	call	MSendByte
	br	60$


; send one byte to midi port, R0 - byte
MSendByte:
	tst	PpuComm
	bne	.-4	
	mov	R0, PpuGmData
	inc	PpuComm
	return


; send bytes array to midi port, R3 - length, R5 - addr of array
MSendArray:
	clr	R0
	bisb	(R5)+, R0
	call	MSendByte
	sob	R3, MSendArray
	return


; plays midi
PlayMidi:
	mov	MTracksNum, MCurTracksNum
10$:	; set timer ticks
	clr	PpuTimerTick
	; check if we still need to play
	tst	MCurTracksNum			; test currently playing tracks number
	beq	99$				; all ended?
	bmi	99$				; ? just in case
	; all tracks one tick
	mov	#MTracks, R4
	mov	#MTrChMsg, MTrChMsgAddr
	mov	MTracksNum, 30$+2
20$:	call	MProcessTrack
	add	#6, R4
	add	#2, MTrChMsgAddr
30$:	dec	#000000
	bne	20$
40$:	; need to exit from keys?
	tst	PpuKeyRelease			; check for key release in PPU
	bne	90$
	tst	PpuTimerTick
	bpl	40$
	br	10$
90$:	; exit from keypress
	cmp	PpuKeyRelease, #^B10000110	; test for AP2 release (TODO: UPR-C? but there are two keys..)
	bne	99$	
	dec	ErrCode				; must set error (well, I will use -1 :)	
99$:	return


; //////////////////////////////////////////////////////////////////////////////
; // CPU -> PPU exchange	
; //////////////////////////////////////////////////////////////////////////////

MsgPpuNoMemory:	
	.asciz	"? unable to allocate memory in PPU"
	.even

; PPU message
;
PPmsg:	.word	PPArr				; address of beginning of array
        .word	177777				; end of transmission

; PPU data exchange array
;
PPArr:	.byte	0				; return value (0 - OK)
PPCmd:	.byte	0				; command
	.word	32				; device type (32 - PPU mem)
PPApp:	.word	0				; address for PPU
PPAcp:	.word	0				; address for CPU
PPLen:	.word	0				; length in words

; send command to PPU with exch array
PPSen:	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	#PPMsg, R0			; array address
	mov	#5, R1				; bytes to send+1 (sending from @#PP_MSG)
	br	1$
2$:	movb	(R0)+, @#176676
1$:	tstb	@#176674			; test if we are ready to send
	bpl	1$				; cycle if >= 0 (not set last bit in byte)
	sob	R1, 2$
	mov	(SP)+, R1
	mov	(SP)+, R0
	return

; send and start PPU code
; R4 - start addr in CPU
; R5 - length / 2
PPURun:	movb	#1, PPCmd			; 1 - allocate memory
	mov	R5, PPLen
	call	PPSen
	tstb	PPArr				; test if allocate success
	beq	1$				; 0 - OK
	.print	#MsgPpuNoMemory
	.exit					; fatal error - out of memory in PPU
1$:	movb	#20, PPCmd			; 20 - write to PPU mem
	mov	R5, PPLen
	mov 	R4, PPAcp
	call	PPSen
	movb	#30, PPCmd			; 30 - run
	call	PPSen
	return

; release PPU memory
PPRele:	movb	#2, PPCmd			; 2 - release memory
	call	PPSen
	return


; //////////////////////////////////////////////////////////////////////////////	
; // PPU
; //////////////////////////////////////////////////////////////////////////////

; PPU starting addr
PPUSta:
	mtps	#200
	clr	R0
	call	@7132(R0)			; stop FD motor

	; check GM presence
	mov	@#4, -(SP)			; save trap int addr (todo: save psw?)
	mov	PC, R0				; new trap int addr
	add	#TrapInt-., R0
	mov	R0, @#4				; set it
	clr	R1				; check for GM
	mtps	#0
	tst	@#177366
	mtps	#200
	mov	(SP)+, @#4			; restore trap int addr
	mov	R1, PpuNoGm			; write GM presence into PPU mem
	bne	2$
	mov	#77, @#177366			; if GM is present - write 77 to control 
2$:	mov	#PpuNoGm/2, @#177010		; write GM presence into CPU mem
	mov	R1, @#177014

	; construct our own lines table	
	mov	PC, R0
	add	#PpuLines-., R0
	add	#10, R0				; align addr with 8. bytes
	bic	#7, R0
	mov	R0, R2				; save addr and use later
	; 1st element - set palette (YRGB YRGB YRGB YRGB)
	;                           (0011 0010 0001 0000)
	;                           (0111 0110 0101 0100)
	mov	#^B1011101010011000, (R0)+
	mov	#^B1111111011011100, (R0)+
	clr	(R0)+				; vaddr is not used here
	mov	R0, (R0)			; next element addr
	add	#2, (R0)
	bis	#3, (R0)+			; #2 = 010 - next element is scale&cursor
	; 2nd line - set scale, lumi and cursor
	mov	#^B0000000000010000, (R0)+	; no cursor
	mov	#^B0000000000000111, (R0)+ 	; 640x288, max luminance (..00111-640, ..10111 - 320)
	clr	(R0)+				; vaddr is not used here
	mov	R0, (R0)
	add	#2, (R0)+			; next element is 2-words
	; 16 not used lines
	mov	#16., R3
10$:	clr	(R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 10$
	; next 288 'main' lines
	mov	#100001, R1
	mov	#288., R3
30$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	add	#80., R1
	sob	R3, 30$
	; set new lines table
	mov	@#270, Ppu270			; backup old table
	mov	@#272, Ppu272
	clr	@#270
	bis	#6, R2				; first line is palette 
	mov	R2, @#272			; saved addr

	; grab keyboard interrupt
	mov	@#300, Ppu300Int
	mov	PC, R0
	add	#PpuKeyboard-., R0
	mov	R0, @#300

	; timer
	bic	#200, @#177716			; turn off sound generator
	mov	@#304, Ppu304Int		; save old timer int
	mov	@#306, Ppu306Int		; and psw for it	
	mov	PC, R0
	add	#PpuTimerInt-., R0
	mov	R0, @#304			; set new timer interrupt
	mov	#200, @#306
	call	InitTimer
	mov	PpuTimerVal, @#177712		; load timer counter
	tst	@#177714
	tst	@#177714
	mov	#^B01000111, @#177710		; allow int, start, timer = 16mks, 62500 ticks per second
						; bits [2 1] 00 - 2, 01 - 4, 10 - 8, 11 - 16

	; signal to CPU that we are working now
	mov	#PpuComm/2, @#177010
	clr	@#177014

	mtps	#0

; get into cycle, await data from CPU and write it to GM
PPUMain:
	mov	#PpuComm/2, @#177010
	mov	@#177014, R0
	bmi	PPUExit				; check for command 'PPU code exit'
	beq	PPUMain				; if no command - cycle again
	dec	R0
	asl	R0
	asl	R0
	add	R0, PC				; br maybe?
	jmp	PpuWriteGm
	jmp	PpuWriteRed
	jmp	PpuWriteGreen
	jmp	PpuWriteBlue
PpuCont:					; set command parameter to 0 and cycle again
	mov	#PpuComm/2, @#177010
	clr	@#177014
	br	PPUMain

PPUExit:
	mtps	#200
	tst	PpuNoGm
	bne	10$
	mov	#^xFF, @#177370			; reset GM
10$:	call	InitTimer
	mov	Ppu304Int, @#304		; restore timer interrupt
	mov	Ppu306Int, @#306
	mov	Ppu300Int, @#300		; restore kbd interrupt
	mov	Ppu270, @#270			; restore screen lines table
	mov	Ppu272, @#272
	mov	#PpuComm/2, @#177010		; signal to CPU that we are finished
	clr	@#177014
	mtps	#0				; just in case
	return


PpuProcedures:	.word	0, PpuWriteGm, PpuWriteRed, PpuWriteGreen, PpuWriteBlue


; write data to GM
PpuWriteGm:
	tst	PpuNoGm
	bne	90$
	; write GM data
	mov	#PpuGmData/2, @#177010
	mov	@#177014, @#177370
90$:	jmp	PpuCont


; write red bytes
PpuWriteRed:
	call	PpuWbpPrep
10$:	mov	R0, (R4)
	mov	(R5), R2			; get two bytes of red bitplane
	inc	R0				; advance source addr
	mov	R1, (R4)			; set dest addr
	movb	R2, @#177014			; put first byte
	swab	R2				; prepare next byte
	inc	(R4)				; advance dest
	inc	R1				; adcanve dest
	movb	R2, @#177014			; put second byte
	inc	R1				; advance dest
	sob	R3, 10$
	jmp	PpuCont


; write green bytes
PpuWriteGreen:
	call	PpuWbpPrep
10$:	mov	R0, (R4)
	mov	(R5), R2
	inc	R0
	mov	R1, (R4)
	movb	R2, @#177015
	swab	R2
	inc	(R4)
	inc	R1
	movb	R2, @#177015
	inc	R1
	sob	R3, 10$
	jmp	PpuCont


; write blue bytes
PpuWriteBlue:
	call	PpuWbpPrep
10$:	mov	R0, (R4)
	mov	(R5), R2
	inc	R0
	mov	R1, (R4)
	movb	R2, @#177012
	swab	R2
	inc	(R4)
	inc	R1
	movb	R2, @#177012
	inc	R1
	sob	R3, 10$
	jmp	PpuCont


; prepare regs for copy picture
PpuWbpPrep:
	mov	#177010, R4
	mov	#177014, R5
	sub	#END_OF_PROGRAM, R3		; bytes count to copy
	mov	#END_OF_PROGRAM/2, R0		; start addr in CPU
	mov	#100000, R1			; vaddr
	mov	#26400, R3			; words count for bitplane
	return


; PPU trap interrupt (just increase R1)
TrapInt:
	inc	R1
	rti


; PPU keyboard interrupt (signal to CPU that we released anykey)
PpuKeyboard:
	mov	@#177010, -(SP)
	mov	R0, -(SP)
	mov	@#177702, R0			; key press or release
	bit	#^B10000000, R0			; is it released?
	beq	10$
	mov	#PpuKeyRelease/2, @#177010
	mov	R0, @#177014
10$:	mov	(SP)+, R0
	mov	(SP)+, @#177010
	rti


; timer interrupt - just decrease timer ticks counter
PpuTimerInt:
	mov	@#177010, -(SP)
	mov	#PpuTimerTick/2, @#177010
	dec	@#177014
	mov	#PpuTimerVal/2, @#177010
	mov	@#177014, @#177712		; set 'new' timer counter (tempo can be changed in song)
	mov	(SP)+, @#177010
	tst	@#177714
	tst	@#177714
	rti


; some init for timer
InitTimer:
	clr	@#177710
	tst	@#177714
	tst	@#177710
	bne	InitTimer
	return


PpuNoGm:	.word	0			; =1 -> no GM device
PpuComm:	.word	177777			; =0 -> PPU code is working now, >0 - ask to write GM data byte, <0 - ask for exit
PpuGmData:	.word	0			; data for sending to GM

Ppu270:		.word	0
Ppu272:		.word	0
Ppu304Int:	.word	0			; timer int addr
Ppu306Int:	.word	0
Ppu300Int:	.word	0			; keyboard int addr
PpuKeyRelease:	.word	0			; =1 -> key was released

PpuTimerVal:	.word	2000
PpuTimerTick:	.word	0

PpuLines:	.blkw	1400			; need less than that, but who cares, PPu have a lot of RAM

PPUEnd:

; //////////////////////////////////////////////////////////////////////////////	
; // PPU END
; //////////////////////////////////////////////////////////////////////////////

; picture R
DukePicR:
@includebin ./graphics/duke.zxr

; picture G
DukePicG:
@includebin ./graphics/duke.zxg

; picture B
DukePicB:
@includebin ./graphics/duke.zxb

; midi music
DukeMidi:
@includebin ./music/grabbag.zx0

END_OF_PROGRAM:

	.end	Start
